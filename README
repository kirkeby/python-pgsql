pgsql Python 2.3+ interface for PostgreSQL 8.0+
===============================================

This is a simple PostgreSQL interface for Python which is derived
from python-pgsql 0.9.7, which was derived from the PyGreSQL 3.8.1
sources module.

The main changes from the python-pgsql module are:

 * Better DB API 2.0 compliance.
 * Fixed bugs (see NEWS).
 * Removed a lot of crufty, superflous DB API extensions.
 * Implement PEP 249 format-style bind-parameters.


1. Installing
=============

This is a standard Python distutils module, so the basic steps for
building it are (on most modern systems, that implies Python 2.1 or
later and PostgreSQL 8,0 or later):

    python setup.py install

The Python and PostgreSQL devel headers and libraries have to be
installed on your system when building.  The usual distutils options
apply and you can use for reference:

    python setup.py --help


2. Usage
========

This module aims at DB API 2.0 compliance, so a good source of
documentation about the API is PEP 249[1]. Other than that there are a
few pgsql-specific extensions, which are described below.

[1] http://www.python.org/dev/peps/pep-0249/


3. Supported DB API 2.0 extensions
==================================

 * cursor.rownumber.
 * cursor iterable protocol (.next and .__iter__).


4. python-pgsql specific extensions
===================================

Warning: All the extensions described here are very likely going to have
their APIs overhauled in the near future.

Iterator Cursors
----------------

These cursors are an interface to server-side cursors, and are thus
suitable for looping over large datasets, as opposed to normal cursors
which read the entire result-set into memory on the client.

See the documentation for pgsql.Connection.itercursor.

Prepared Statements
-------------------

These support creating a prepared statement on the server-side, which
can be advantageous if you want to execute the same statement many
times, because it can save the server parsing the same SQL each time.

See the documentation for pgsql.Connection.prepare.

PostgreSQL Notices
------------------
db.notices
db.setnotices(bool)
        db.notices is list of preformatted server notice strings. You
        can enable the capture of server notices by calling
        db.setnotices(True|False). By default, notices are not collected
        by the database object. Every call to setnotices() will reset the
        notices list, regardless of the enable flag (therefore you
        should save notices beforehand, if you need them)
